<div id="homepage">
  <div class="row">
    <div class="col-sm-4">
      <div class="jumbotron text-center">
        <h1>Diseasetrack</h1>
        <p>Realtime mashup visualization of tweets about getting sick</p>
        <a href="https://github.com/dbkaplun/diseasetrack" class="btn btn-large btn-danger" target="_blank">Github <i class="fa fa-github"></i></a>
      </div>
    </div>
    <div class="col-sm-8">
      <div id="chart" class="chart"></div>
    </div>
  </div>
  <div id="map" class="map"></div>
  <ul id="messages" class="hide" v-class="hide: false">
    <li v-repeat="messages" class="{{class}}">{{message}}</li>
  </ul>
</div>

<div id="marker-popup-template" class="hide" v-class="hide: !marker">
  <blockquote>
    <p>{{{json.text | autoLink}}}</p>
    <footer>@<a href="http://twitter.com/{{json.user.screen_name}}" target="_blank">{{json.user.screen_name}}</a> at <span>{{timestamp | time}}</span></footer>
  </blockquote>
</div>

<noscript>
  <h1>Sorry!</h1>
  <p>You need JavaScript enabled to view this page.</p>
</noscript>

<style>
#homepage { position: relative; height: 100%; }
#homepage .jumbotron h1 { font-size: 36px; }
#map { min-height: 320px; }
@media screen and (min-width: 768px) {
  #homepage .jumbotron { min-height: 320px; }
  #map { position: absolute; top: 320px; left: 0; right: 0; bottom: 0; }
}
#messages { position: absolute; bottom: 0; left: 0; pointer-events: none; }
</style>

<script>
(function (root) {
  document.addEventListener('diseasetrackReady', function () {
    require(['jquery', 'vue', 'nprogress', 'd3', 'c3', 'leaflet', 'sails.io', 'moment', 'twitter-text', 'binarysearch', 'jquery.throttle-debounce', 'leaflet.markercluster', 'leaflet.heat', 'leaflet.geosearch.provider.openstreetmap'], function (jQuery, Vue, NProgress, d3, c3, L, io, moment, twitter, bs) {
      var keyCmp = function (key) { return function (a, b) { return key(a) - key(b); }; };
      var tweetKey = function (tweet) { return -((tweet || {}).timestamp || 0); };
      var tweetCmp = keyCmp(tweetKey);
      var insertionIndex = function (i) { return i < 0 ? -i - 1 : i; };

      var $ = jQuery;

      Vue.config.async = false;
      Vue.filter('time', function (date) { return moment(date).format("h:mma"); })
      Vue.filter('autoLink', function (text) { return twitter.autoLink(text || '', {target: '_blank'}); });
      // Vue.component('marker-popup', {template: '#marker-popup-template'});
      var popupView = new Vue({el: '#marker-popup-template'});
      return root.homepageView = new Vue({
        el: '#homepage',
        data: {
          tweets: [],
          chartDomain: [new Date(0), new Date(0)],
          messages: [],

          map: null,
          markerCluster: L.markerClusterGroup(),
          heatLayer: L.heatLayer([]),

          TWEET_PRUNE_AGE: moment.duration(1, 'day'),
          TWEET_CHUNK_SIZE: 400,
          UPDATE_TWEETS_INTERVAL: moment.duration(1, 'minutes'),
          CHART_TWEETS_INTERVAL: moment.duration(15, 'minutes'),
          MESSAGES_TO_SHOW: 5
        },
        ready: function () {
          var self = this;
          self.initMap();
          self.initChart();
          self.pollForTweets();
        },
        methods: {
          initChart: function () {
            var self = this;
            self.chart = c3.generate({
              bindto: '#chart',
              data: {
                x: 't',
                xSort: false,
                columns: [
                  ['t', new Date()],
                  ['Tweet count', 0]
                ],
                types: {'Tweet count': 'area'}
              },
              axis: {
                  x: {
                      type: 'timeseries',
                      tick: {format: '%I:%M%p'}
                  },
                  y: {
                      label: "Tweet count"
                  }
              },
              subchart: {
                show: true,
                onbrush: function (domain) {
                  self.chartDomain = domain;
                  self.updateMap();
                }
              },
              legend: {show: false},
              point: {r: 2},
              padding: {top: 50, left: 50, right: 50, bottom: 50},
              transition: {duration: 0}
            });
            return self.chart;
          },
          initMap: function () {
            var self = this;
            self.map = L.map('map', {
              center: [0, 0],
              zoom: 1,
              layers: [
                L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
                  attribution: '&copy; <a href="http://osm.org/copyright" target="_blank">OpenStreetMap</a>'
                }),
                self.heatLayer,
              ]
            });
            self.map.addLayer(self.markerCluster);
            new L.Control.GeoSearch({
              provider: new L.GeoSearch.Provider.OpenStreetMap(),
              showMarker: false,
              zoomLevel: 5
            }).addTo(self.map);
            self.map.on('moveend', self.updateChart.bind(self));
            return self.map;
          },
          pollForTweets: function () {
            var self = this;
            NProgress.start();
            self.updateTweets({
              where: {
                timestamp: {'>': new Date(Math.max(-tweetKey(self.tweets[0]), +self.getPruneTimestamp()))}
              }
            }, function () {
              NProgress.done();
              self.updateTweetsTimeout = setTimeout(self.pollForTweets.bind(self), +self.UPDATE_TWEETS_INTERVAL);
            });
          },

          updateTweets: function (q, done) {
            var self = this;
            if (typeof q === 'function') { done = q; q = null; }
            done = done || function () {};
            self.getTweetsChunked(q, function (tweets) {
              if (!tweets.length) done();
              else self.addTweets(tweets);
              return tweets.length;
            });
          },
          getTweetsChunked: function (q, chunkFn) {
            var self = this;
            if (typeof q === 'function') { chunkFn = q; q = null; }
            q = q || {};
            chunkFn = chunkFn || function (tweets) { return tweets.length; };
            self.getTweets(q, function () {
              if (!chunkFn.apply(self, arguments)) return;
              self.getTweetsChunked($.extend(null, q, {
                skip: (q.skip || 0) + self.TWEET_CHUNK_SIZE
              }), chunkFn);
            });
          },
          getTweets: function (q, fn) {
            var self = this;
            return io.socket.get('/tweet', $.extend(true, {
              where: {
                retweeted: false,
                geo_status: 'resolved',
                timestamp: {'>': self.getPruneTimestamp()}
              },
              sort: 'timestamp DESC',
              limit: self.TWEET_CHUNK_SIZE
            }, q), fn);
          },
          addTweets: function (tweets) {
            var self = this;
            tweets = (tweets || []).filter(function (tweet) {
              tweet.timestamp = new Date(tweet.timestamp);

              if (!tweet.geojson) return;

              popupView.$data = tweet;
              var popupHTML = popupView.$el.innerHTML;
              tweet.marker = L.marker(tweet.geojson.coordinates) //{title: $('<div>').html(popupHTML).text()})
                .bindPopup(popupHTML);

              tweet.heatMarker = $.map(tweet.geojson.coordinates, Number)
                .concat([0]);
              return true;
            });
            var tweetsAdded = tweets.length;
            if (tweetsAdded) {
              self.tweets = tweets // assumes added tweets are more recent for performance's sake
                .concat(self.tweets)
                .sort(tweetCmp);
              var tweetsPruned = self.pruneTweets().length;

              self.messages = self.messages
                .concat([{
                  message: tweetsAdded + " fresh tweet" + (tweetsAdded === 1 ? "" : "s") +
                   ", total " + self.tweets.length +
                   (tweetsPruned ? " (" + tweetsPruned + " pruned)" : ""),
                  class: 'text-muted'
                }])
                .slice(-self.MESSAGES_TO_SHOW);
              self.updateChart();
              self.updateMap();
            }
          },
          updateChart: $.throttle(200, function () {
            var self = this;
            var mapBounds = self.map.getBounds();

            var pruneTimestamp = self.getPruneTimestamp();
            var interval = {count: 0, end: new Date()};
            interval.start = new Date(interval.end - self.CHART_TWEETS_INTERVAL);

            var columns = [['t'], ['Tweet count']];
            $.each(self.tweets, function (_, tweet) {
              if (!mapBounds.contains(tweet.geojson.coordinates)) return;
              interval.count++;
              if (tweet.timestamp < pruneTimestamp) return false;
              if (tweet.timestamp < interval.start) {
                columns[0].push(interval.start);
                columns[1].push(interval.count);
                interval = {count: 0, end: interval.start};
                interval.start = new Date(Math.max(interval.end - self.CHART_TWEETS_INTERVAL, +pruneTimestamp));
              }
            });
            if (interval.count) {
              columns[0].push(interval.start);
              columns[1].push(interval.count);
            }
            self.chart.load({columns: columns});
          }),
          updateMap: $.throttle(200, function () {
            var self = this;

            var markers = [];
            var heatMarkers = [];
            var now = new Date();
            var tweets = self.tweets;
            if (+self.chartDomain[0] !== +self.chartDomain[1]) tweets = tweets.slice(
              insertionIndex(bs(self.tweets, {timestamp: self.chartDomain[1]}, tweetKey)),
              insertionIndex(bs(self.tweets, {timestamp: self.chartDomain[0]}, tweetKey))
            );
            $.each(tweets, function (_, tweet) {
              markers.push(tweet.marker);
              tweet.heatMarker[2] = 10 * (self.TWEET_PRUNE_AGE - (now - tweet.timestamp)) / self.TWEET_PRUNE_AGE;
              heatMarkers.push(tweet.heatMarker);
            });
            self.markerCluster.removeLayers(self.markerCluster.getLayers());
            self.markerCluster.addLayers(markers);
            self.heatLayer.setLatLngs(heatMarkers);
          }),
          pruneTweets: function () {
            var self = this;
            var tweets = self.tweets;
            return tweets.splice(insertionIndex(bs(tweets, {timestamp: self.getPruneTimestamp()}, tweetKey)) + 1, Infinity);
          },
          getPruneTimestamp: function () { return moment().subtract(this.TWEET_PRUNE_AGE).toDate(); }
        }
      });
    });
  });
}(this));
</script>
