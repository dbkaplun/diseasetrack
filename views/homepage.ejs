<div id="homepage">
  <div id="map" class="map"></div>
</div>

<div id="marker-popup-template" class="hide" v-class="hide: !marker">
  <blockquote>
    <p>{{{json.text | autoLink}}}</p>
    <footer>@<a href="http://twitter.com/{{json.user.screen_name}}" target="_blank">{{json.user.screen_name}}</a> at <span>{{timestamp | time}}</span></footer>
  </blockquote>
</div>

<style>
#homepage, #map { height: 100%; }
#map { min-height: 500px; }
</style>

<script>
(function (root) {
  document.addEventListener('diseasetrackReady', function () {
    require(['jquery', 'vue', 'sails.io', 'leaflet', 'moment', 'twitter-text', 'leaflet.markercluster', 'leaflet.geosearch.provider.openstreetmap'], function (jQuery, Vue, io, L, moment, twitter) {
      var $ = jQuery;
      Vue.config.async = false;
      Vue.filter('time', function (date) { return moment(date).format("h:mma"); })
      Vue.filter('autoLink', function (text) { return twitter.autoLink(text || '', {target: '_blank'}); });
      // Vue.component('marker-popup', {template: '#marker-popup-template'});
      var popupView = new Vue({el: '#marker-popup-template'});
      return root.homepageView = new Vue({
        el: '#homepage',
        data: {
          TWEET_DISPLAY_COUNT: 1000,
          tweets: [],
          markerCluster: L.markerClusterGroup(),
        },
        ready: function () {
          var self = this;
          self.initMap();
          self.subscribeToTweets();
        },
        methods: {
          initMap: function () {
            var self = this;
            var map = L.map('map', {
              center: [0, 0],
              zoom: 1,
              layers: [L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="http://osm.org/copyright" target="_blank">OpenStreetMap</a>'
              })]
            });
            new L.Control.GeoSearch({
              provider: new L.GeoSearch.Provider.OpenStreetMap(),
              showMarker: false,
              zoomLevel: 5
            })
              .addTo(map);
            map.addLayer(self.markerCluster);
            return map;
          },
          subscribeToTweets: function () {
            var self = this;
            io.socket.get('/tweet', {
              retweeted: false,
              geo_status: 'resolved',
              sort: 'timestamp DESC',
              limit: self.TWEET_DISPLAY_COUNT
            }, function (tweets) { self.addTweets(tweets); });
            io.socket.on('tweet', function (data) { self.addTweets([data.data]); });
          },
          addTweets: function (tweets) {
            console.log('addTweets', tweets.length);
            var self = this;
            var markers = $.map(tweets, function (tweet) {
              if (!tweet.geojson) return;
              popupView.$data = tweet;
              var popupHTML = popupView.$el.innerHTML;
              tweet.marker = L.marker(tweet.geojson.coordinates, {title: $('<div>').html(popupHTML).text()})
                .bindPopup(popupHTML);
              tweet.marker.tweet = tweet;
              return tweet.marker;
            });
            self.markerCluster.addLayers(markers);
            tweets = tweets.concat(self.tweets);
            var removedTweets = tweets.splice(self.TWEET_DISPLAY_COUNT, Infinity);
            self.markerCluster.removeLayers($.map(removedTweets, function (tweet) {
              return tweet.marker;
            }));
          }
        }
      });
    });
  });
}(this));
</script>
